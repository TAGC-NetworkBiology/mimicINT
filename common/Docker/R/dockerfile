FROM ubuntu:18.04

MAINTAINER SÃ©bastien A. Choteau (sebastien.choteau@inserm.fr)


# ===========================================
# INSTALL R
# ===========================================

## Declare environment variables
ARG BUILD_DATE
ENV BUILD_DATE ${BUILD_DATE:-}

# R version
ARG R_VERSION
ENV R_VERSION ${R_VERSION:-3.6.0}

# Locale (Prefered language and encoding for messages)
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8



## Install dependencies
# NB: for packages making the difference between the user version
# and the developer version, both -devel and -dev have to be installed
RUN apt-get update \
  && apt-get -y install \
  build-essential \
# Library for the compilation of packages from source (e.g. cairo)
  pkg-config \
# Foreign function interface library (necessary for
# R packages installation)
  libffi-dev \
  libmagickwand-dev \
# Install python (Optional)
  python2.7 \
  python-pip \
# C-foreign function interface for python (Optional)
  python-cffi


RUN apt-get update \
  && apt-get install -y --no-install-recommends \
# Bash completion and certificates
    bash-completion \
    ca-certificates \
    file \
    fonts-texgyre \
# C compiler
    g++ \
# Fortran compiler
    gfortran \
    gsfonts \
# Data compression library
    libbz2-1.0 \
# Multiprotocol file transfer library
    libcurl3 \
# Dev files for Unicode (optional)
    libicu60 \
# JPEG pictures library (optional)
    libturbojpeg \
# Basic Linear Algebra Subprograms (BLAS) library (optional)
    libopenblas-dev \
# x11, jpeg, png and tiff pictures library (optional)
    libpangocairo-1.0-0 \
# PNG pictures library (optional)
    libpng16-16 \
# TIFF pictures library (optional)
    libtiff5 \ 
# Implement regular expressions in perl
# NB: Must be built with UTF-8 support
    libpcre3 \
# XZ-format compression library
    liblzma5 \
# Package to set locale
    locales \
# Make for compiling from source code
    make \
# Unzip and zip
    unzip \
    zip \
    libssl-dev \
# Data compression library
    zlib1g



## Configure local environment
# Use UTF-8
RUN  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
  && locale-gen en_US.utf8 \
# Define language to english
  && /usr/sbin/update-locale LANG=en_US.UTF-8



## R Dependencies
# These packages are only necessary to install R
# and may be removed after R installation. 
RUN BUILDDEPS="curl \
# Data compression library
    libbz2-dev \
# Multiprotocol file transfer library
    libcurl4-openssl-dev \
# Implement regular expressions in perl
# NB: Must be built with UTF-8 support
    libpcre3-dev \
# Perl
    perl \
# Allow installation of Java-using packages (optional)
    default-jdk \
# X11 jpeg, png and tiff pictures library (optional)
    libcairo2-dev \ 
# X11, jpeg, png and tiff pictures library (optional)
    libpango1.0-dev \
# JPEG pictures library (optional)
    libjpeg-dev \
# Dev files for Unicode (optional)
    libicu-dev \
# PNG pictures library (optional)
    libpng-dev \
# Readline and history libraries
    libreadline-dev \
# TIFF pictures library (optional)
    libtiff5-dev \
    liblzma-dev \ 
# X11 libraries (view graphs on-screen)
    libx11-dev \
    libxt-dev \
# LaTeX for documentation and vignettes
    texinfo \
    texlive-extra-utils \
    texlive-fonts-recommended \
    texlive-fonts-extra \
    texlive-latex-recommended \
    x11proto-core-dev \
    xauth \
# Additional fonts (optional)
    xfonts-base \
    xvfb \
# Data compression library
    zlib1g-dev" \
  && apt-get update \
  && apt-get install -y --no-install-recommends $BUILDDEPS



## Install R
# Download and extract source code in /tmp
RUN cd /tmp \
# Download source code
  && curl -O https://cran.r-project.org/src/base/R-3/R-${R_VERSION}.tar.gz \
# Unpack source code
  && tar -xf R-${R_VERSION}.tar.gz \
  && cd R-${R_VERSION} \ 
# Set compiler flags
# Size of PDF created (default 'a4', valid values:
# 'letter', 'legal', 'executive')
  && R_PAPERSIZE=letter \
    R_BATCHSAVE="--no-save --no-restore" \
# Default HTML browser to use
    R_BROWSER=xdg-open \
    PAGER=/usr/bin/pager \
# Perl binaries
    PERL=/usr/bin/perl \
# Zip and unzip binaries
    R_UNZIPCMD=/usr/bin/unzip \
    R_ZIPCMD=/usr/bin/zip \
# Awk binaries
    AWK=/usr/bin/awk \
    R_PRINTCMD=/usr/bin/lpr \
# Define primary library directory (lib or lib64)
    LIBnn=lib \
# Configure Fortran compiler flag (allow to reduce compilation time)
    CFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
# Configure C++ compiler (allow to reduce compilation time)
    CXXFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
# Configure options and compile source code
# -enable-R-shlib: Build R as a shared / dynamic library
# -enable-memory-profiling: Attempt to compile support for Rprofmem() and tracemem()
# -with-readline: Use command-line editing and command completion
# -with-blas: Define BLAS library
# -disable-nls: Disable translation message
  ./configure --enable-R-shlib \
               --enable-memory-profiling \
               --with-readline \
               --with-blas="-lopenblas" \
               --disable-nls \
               --without-recommended-packages \
# Build and install from source code
  && make \
  && make install
  
  
  
# Add a default CRAN mirror
RUN echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/local/lib/R/etc/Rprofile.site

# Add a library directory (for user-installed packages)
RUN mkdir -p /usr/local/lib/R/site-library \
  && chown root:staff /usr/local/lib/R/site-library \
  && chmod g+wx /usr/local/lib/R/site-library
  
# Fix library path
#### Define R libraries locations (colon separated)
RUN echo "R_LIBS_USER='/usr/local/lib/R/site-library'" >> /usr/local/lib/R/etc/Renviron \
  && echo "R_LIBS=\${R_LIBS-'/usr/local/lib/R/site-library:/usr/local/lib/R/library:/usr/lib/R/library'}" >> /usr/local/lib/R/etc/Renviron

# Use littler installation scripts
# These are scripts and command-line front-end for R 
# permetting the use of R in command-line context
RUN Rscript -e "install.packages(c('littler', 'docopt'), repo='$MRAN')" \
  && ln -s /usr/local/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \
  && ln -s /usr/local/lib/R/site-library/littler/examples/installGithub.r /usr/local/bin/installGithub.r \
  && ln -s /usr/local/lib/R/site-library/littler/bin/r /usr/local/bin/r



# Clean R install
RUN cd / \
# Remove source code
  && rm -rf /tmp/* \
# Remove dependencies
  && apt-get remove --purge -y $BUILDDEPS \
  && apt-get autoremove -y \
  && apt-get autoclean -y \
  && rm -rf /var/lib/apt/lists/*




# ===========================================
# INSTALL PANDOC
# ===========================================

# Pandoc version
ARG PANDOC_VERSION
ENV PANDOC_VERSION ${PANDOC_VERSION:-2.9.2.1}

# Install dependencies
RUN apt-get update && apt-get install -y wget

# Install stack
RUN apt-get update && apt-get install -y git \
  && wget -qO- https://get.haskellstack.org/ | sh
  
# Install pandoc
RUN cd /tmp \
# Download pandoc
  && wget https://hackage.haskell.org/package/pandoc-${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}.tar.gz \
# Unpack source code
  && tar xvzf pandoc-${PANDOC_VERSION}.tar.gz \
  && cd pandoc-${PANDOC_VERSION} \
# Build and install from source code
  && stack setup \
  && stack install \
# Copy pandoc binaries in /usr/local/bin, 
# so it could be used by non-root users
  && cp /root/.local/bin/pandoc /usr/local/bin/pandoc


# Clean pandoc install
RUN cd / \
  && rm -rf /tmp/*
  


# ===========================================
# INSTALL R PACKAGES
# ===========================================

# Install R packages
RUN R -e 'install.packages( "getopt" )'
RUN R -e 'install.packages( "ggplot2" )'
RUN R -e 'install.packages( "plotly" )'
RUN R -e 'install.packages( "data.table" )'
RUN R -e 'install.packages( "gprofiler2" )'

# Install Bioconductor packages
RUN R -e 'install.packages("BiocManager")'



# ===========================================
# CLEAN INSTALL
# ===========================================

# Remove other dependencies
RUN apt-get clean \
  && apt-get remove -y --purge build-essential
