#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os

from fr.tagc.mimicint.util.option.OptionManager import *

# This script allows to generate a file containing the
# disordered propensity and amino acid disorder 
# scores (IUPred) for all query sequences.


# ===========================================
# Constants
# ===========================================
# 
# Extension at the end of the IUScore files generated by IUPred
IUSCORE_FILE_EXTENSION = '.iupred.txt'


# List of options allowed
# -----------------------
# Path of the folder containing the IUPred scores files
IUSCORE_FOLDER_OPTION = 'IUSCORE_FOLDER'
# Path to the file associating to each sequence name used 
# by SLiMProb the original sequence name in the fasta file
SEQNAMES_FILE_OPTION = "SEQNAMES_FILE"
# Path to the output file that will contain the disorder propensities
DISORDER_PROP_FILE_OPTION = 'DISORDER_PROP_FILE'
# Threshold used for the detection of disordered regions with SLiMProb
IUSCORE_THRESHOLD_OPTION = 'IUSCORE_THRESHOLD'

OPTION_LIST = [ [ '-i', '--iuscoredir', 'store', 'string', IUSCORE_FOLDER_OPTION, None, 'The path of the folder containing the IUPred scores files.' ],
                [ '-n', '--seqNames', 'store', 'string', SEQNAMES_FILE_OPTION, None, 'The path to the file associating to each sequence name used by SLiMProb \
                                                                                      the original sequence name in the fasta file.' ],
                [ '-o', '--output', 'store', 'string', DISORDER_PROP_FILE_OPTION, None, 'The path to the output file that will contain the disorder propensities.' ],
                [ '-c', '--iucut', 'store', 'string', IUSCORE_THRESHOLD_OPTION, None, 'The threshold used for the detection of disordered regions with SLiMProb.' ] ]
 


# ===========================================
# Script
# ===========================================

# compute_query_disorder
# ----------------------
#
# This function allows to compute for all sequences of the query
# their general propensity to be disordered given the IUScores 
# computed by IUPred when running SLiMProb and to write them in 
# a file.
#
# @param iuscore_folder_path: String - The path of the folder containing the IUPred scores
#                                      for all sequences, as generated by SLiMProb.
# @param seq_names_file_path: String - The path to the file associating to each SLiMProb
#                                      sequence its name in the original query fasta file.
# @param disorder_prop_file_path: String - The path of the output file.
# @param iuscore_threshold: Float - The threshold used when running SLiMProb ('iucut' option).
#
def compute_query_disorder( iuscore_folder_path, seq_names_file_path, disorder_prop_file_path, iuscore_threshold ):
        
    # Get the association of sequence names generated by SLiMProb
    # with the sequence names as defined in the query fasta file
    seq_names_asso_dict = {}
    with open( seq_names_file_path, 'r' ) as seq_names_file:
        next( seq_names_file )
        line = seq_names_file.readline()
        while ( line != '' ):
            line = line.replace( '\n', '' ).split( '\t' )
            seq_names_asso_dict[ line[ 0 ] ] = line[ 1 ]
            line = seq_names_file.readline()
        
    
    # Get the list of IUScore files contained in the iuscore folder
    iuscore_files = os.listdir( iuscore_folder_path )
    iuscore_files = [ file for file in iuscore_files if file.endswith( IUSCORE_FILE_EXTENSION ) ]
    
    
    # Create the output file as a tab-separated values file
    # that contains the following columns:
    # [0] sequence: String - The name of the sequence.
    # [1] length: String - The length of the sequence in amino acids.
    # [2] disorder_propensity: Float - The general disorder propensity of the sequence,
    #                                  i.e. the proportion of amino acids that have an
    #                                  IUPred score higher than the threshold value.
    with open( disorder_prop_file_path, 'w' ) as disorder_prop_file:
        
        # Add the header
        disorder_prop_file.write( '\t'.join( [ 'sequence', 'length', 'disorder_propensity', 'iuscores' ] ) + '\n' )
        
        # Sequentially open the IUScore files
        # These files are expected to be space-separated values and
        # to contain the sequence name as first value and the a float
        # for each amino acid (in the same order as the sequence provided
        # in the fasta file) revealing the propensity of the amino 
        # acid to be disordered.
        for iuscore_file in iuscore_files:
            
            with open( os.path.join( iuscore_folder_path, iuscore_file ), 'r' ) as iuscores:
                
                # Read the whole file
                iuscores_list = iuscores.read()        
                iuscores_list = iuscores_list.replace( ' ', '\t' ).replace( '\n', '' ).split( '\t' )
                
                # If the file ends with a '\n', then remove it
                if ( iuscores_list[ -1 ] == '\n' ):
                    del iuscores_list[ -1 ]
                    
                # Get the name of the sequence
                seq = iuscores_list[ 0 ]
                seqname = seq_names_asso_dict[ seq ]
                
                # Get the list of scores
                scores = iuscores_list[ 1: ]
                scores = list( map( float, scores ) )
                
                # Get the length of the sequence
                seq_len = len( scores )
                
                # Compute the general disorder propensity
                # This propensity is computed as being the proportion of amino acid of the 
                # sequence that have an IUPred score higher of equal to the IUScore 
                # threshold selected for IUPred among the total number of amino acids
                disordered_aa = 0
                for score in scores:
                    if ( score >= iuscore_threshold ):
                        disordered_aa += 1
                
                disorder_propensity = float( disordered_aa ) / float( seq_len )
                
                # Add the entry for this sequence in the output file
                disorder_prop_file.write( '\t'.join( map( str, [ seqname, 
                                                                 seq_len, 
                                                                 disorder_propensity, 
                                                                 ','.join( map( lambda x: str(  round( x, 2 ) ), 
                                                                                scores ) ) ] ) ) + '\n' )



# ===========================================
# Parse command line arguments 
# and run script
# ===========================================
     
if __name__=='__main__':
    
    # Parse the command-line arguments
    option_dict = parse_arguments( OPTION_LIST )
    
    # Get the IUScore folder path
    iuscore_folder_path = get_option( option_dict = option_dict, 
                                      option_name = IUSCORE_FOLDER_OPTION, 
                                      not_none = True )
    
    # Get the path to the file associating the sequence names used
    # in SLiMProb output with the original sequence names
    seq_names_file_path = get_option( option_dict = option_dict,
                                      option_name = SEQNAMES_FILE_OPTION, 
                                      not_none = True )
    
    # Get the output folder path
    disorder_prop_file_path = get_option( option_dict = option_dict, 
                                          option_name = DISORDER_PROP_FILE_OPTION, 
                                          not_none = True )
    
    # Get the IUPred cut-off
    iuscore_threshold = get_option( option_dict = option_dict, 
                                    option_name = IUSCORE_THRESHOLD_OPTION, 
                                    not_none = True )
    try:
        iuscore_threshold = float( iuscore_threshold )
    except:
        raise Exception( 'The IUPred cut-off provided has to be an float.' )
    else:
        if ( ( iuscore_threshold < 0 )
             or ( iuscore_threshold > 1 ) ):
            raise Exception( 'The IUPred cut-off provided has to be an float between 0 and 1.' )
    
    # Run the script    
    compute_query_disorder( iuscore_folder_path = iuscore_folder_path, 
                            seq_names_file_path = seq_names_file_path,
                            disorder_prop_file_path = disorder_prop_file_path, 
                            iuscore_threshold = iuscore_threshold )
