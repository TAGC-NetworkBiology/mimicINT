#!/usr/bin/python3
# -*- coding: utf-8 -*-

########## Parser for the slimprob results file ##########

#### Import modules ####
from fr.tagc.mimicint.util.option.OptionManager import *
import csv


# ===========================================
# Constants
# ===========================================

# List of options allowed
# -----------------------
# Path to the file with slimprob results (a SlimSuite tool)
SLIMPROB_RES_FILE_OPTION = "SLIMPROB_RES_FILE"
# Path to the file with ELM classes
ELM_CLASSES_FILE_OPTION = "ELM_CLASSES_FILE"
# Path to the results file + its name
PARSED_FILE_OPTION = "PARSED_FILE"
# Path to the file associating to each sequence name used 
# by SLiMProb the original sequence name in the fasta file
SEQNAMES_FILE_OPTION = "SEQNAMES_FILE"

OPTION_LIST = [ [ "-s", "--slimprobRes", "store", "string", SLIMPROB_RES_FILE_OPTION, None, "The path to the file with slimprob results (a SlimSuite tool)." ],
                [ "-e", "--elmClasses", "store", "string", ELM_CLASSES_FILE_OPTION, None, "The path to the file containing the ELM classes." ],
                [ "-p", "--parsedFile", "store", "string", PARSED_FILE_OPTION, None, "The path to the results file + its name." ],
                [ "-n", "--seqNamesFile", "store", "string", SEQNAMES_FILE_OPTION, None, "The path to the file associating to each sequence name used by SLiMProb \
                                                                                          the original sequence name in the fasta file." ] ]



# ===========================================
# Script
# ===========================================

#### Parser definition ####
def parse_slimprob(slim_prob_res,elm_classes,seq_names_file_path,parsed_file) :
    '''
    slim_prob_res : file with slimprob results (a SlimSuite tool)
    parsed_file : path to the results file + its name
    seq_names_file: path to the file associated the sequence names used by SLiMProb 
                    with the original sequence names
    
    This parser allows to collect the useful columns in the slimprob
    results file :
    Motif, Seq, Start_pos, End_pos, Prot-len, Pattern, Match, Comp and IUP
    '''
    
    #### Reading the ELM class files ####
    slim_description = {}
    with open( elm_classes, "r") as elm_classes_file:
        line = elm_classes_file.readline()
        while line != '':            
            if ( ( not line.startswith( "#")) and not ( line.startswith( "Accession"))):
                line_content = line.split( "\t" )
                # Get the ELMIdentifier
                elm_identifier = line_content[1]
                # Get the FunctionalSiteName
                site_name = line_content[2]
                # Add this ELM to the dictionary
                slim_description[ elm_identifier.replace('"','') ] = site_name.replace('"','')
            line = elm_classes_file.readline()
            
            
    #### Reading the sequence name file ####
    # Get the association of sequence names generated by SLiMProb
    # with the sequence names as defined in the query fasta file
    seq_names_asso_dict = {}
    with open( seq_names_file_path, 'r' ) as seq_names_file:
        next( seq_names_file )
        line = seq_names_file.readline()
        while ( line != '' ):
            line = line.replace( '\n', '' ).split( '\t' )
            seq_names_asso_dict[ line[ 0 ] ] = line[ 1 ]
            line = seq_names_file.readline()
    
    
    #### Reading the slimprob results file ####
    lineList=list()
    with open(slim_prob_res, "r") as infile:
        reader = csv.DictReader(infile, dialect="excel-tab" )
        for row in reader:
            lineList.append(row)

    
    #### writing in the results file the columns we are interested in ####
    seqnames_dict = {}
    with open(parsed_file, "w") as output_file:
        output_file.write( "\t".join( [ "Seq", "Motif", "Description",
                                        "Start_Pos", "End_Pos", 
                                        "Prot_Len", "Pattern", "Match", 
                                        "Comp", "IUP\n"]))
        for row in lineList :
            
            # Get the appropriate name to use for the sequence
            row["SeqUpdated"] = seq_names_asso_dict[ row["Seq"]]
            
            # Add the line to the file
            output_file.write( "\t".join( [ row["SeqUpdated"], row["Motif"], slim_description[row["Motif"]], 
                                            row["Start_Pos"], row["End_Pos"], 
                                            row["Prot_Len"], row["Pattern"], row["Match"],
                                            row["Comp"], row["IUP"] +"\n"]))



# ===========================================
# Parse command line arguments 
# and run script
# ===========================================

#### Code execution in the console ####
if __name__ == "__main__":
    
    # Parse the command-line arguments
    option_dict = parse_arguments( OPTION_LIST )
    
    # Get the path to the file with slimprob results (a SlimSuite tool)
    slim_prob_res = get_option( option_dict = option_dict, 
                                option_name = SLIMPROB_RES_FILE_OPTION, 
                                not_none = True )
    
    # Get the path to the file containing the ELM classes
    elm_classes = get_option( option_dict = option_dict,
                              option_name = ELM_CLASSES_FILE_OPTION,
                              not_none = True )
    
    # Get the path to the results file + its name
    parsed_file = get_option( option_dict = option_dict,
                              option_name = PARSED_FILE_OPTION, 
                              not_none = True )
    
    # Get the path to the file associating the sequence names used
    # in SLiMProb output with the original sequence names
    seq_names_file_path = get_option( option_dict = option_dict,
                                      option_name = SEQNAMES_FILE_OPTION, 
                                      not_none = True )
    
    # Run the script
    parse_slimprob( slim_prob_res = slim_prob_res,
                    elm_classes = elm_classes,
                    seq_names_file_path = seq_names_file_path,
                    parsed_file = parsed_file )
    